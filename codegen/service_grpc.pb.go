// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// OsirisClient is the client API for Osiris service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type OsirisClient interface {
	RunProgram(ctx context.Context, in *RunProgramRequest, opts ...grpc.CallOption) (Osiris_RunProgramClient, error)
}

type osirisClient struct {
	cc grpc.ClientConnInterface
}

func NewOsirisClient(cc grpc.ClientConnInterface) OsirisClient {
	return &osirisClient{cc}
}

func (c *osirisClient) RunProgram(ctx context.Context, in *RunProgramRequest, opts ...grpc.CallOption) (Osiris_RunProgramClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Osiris_serviceDesc.Streams[0], "/Osiris/RunProgram", opts...)
	if err != nil {
		return nil, err
	}
	x := &osirisRunProgramClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Osiris_RunProgramClient interface {
	Recv() (*RunProgramResponse, error)
	grpc.ClientStream
}

type osirisRunProgramClient struct {
	grpc.ClientStream
}

func (x *osirisRunProgramClient) Recv() (*RunProgramResponse, error) {
	m := new(RunProgramResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// OsirisServer is the server API for Osiris service.
// All implementations must embed UnimplementedOsirisServer
// for forward compatibility
type OsirisServer interface {
	RunProgram(*RunProgramRequest, Osiris_RunProgramServer) error
	mustEmbedUnimplementedOsirisServer()
}

// UnimplementedOsirisServer must be embedded to have forward compatible implementations.
type UnimplementedOsirisServer struct {
}

func (UnimplementedOsirisServer) RunProgram(*RunProgramRequest, Osiris_RunProgramServer) error {
	return status.Errorf(codes.Unimplemented, "method RunProgram not implemented")
}
func (UnimplementedOsirisServer) mustEmbedUnimplementedOsirisServer() {}

// UnsafeOsirisServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to OsirisServer will
// result in compilation errors.
type UnsafeOsirisServer interface {
	mustEmbedUnimplementedOsirisServer()
}

func RegisterOsirisServer(s grpc.ServiceRegistrar, srv OsirisServer) {
	s.RegisterService(&_Osiris_serviceDesc, srv)
}

func _Osiris_RunProgram_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(RunProgramRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(OsirisServer).RunProgram(m, &osirisRunProgramServer{stream})
}

type Osiris_RunProgramServer interface {
	Send(*RunProgramResponse) error
	grpc.ServerStream
}

type osirisRunProgramServer struct {
	grpc.ServerStream
}

func (x *osirisRunProgramServer) Send(m *RunProgramResponse) error {
	return x.ServerStream.SendMsg(m)
}

var _Osiris_serviceDesc = grpc.ServiceDesc{
	ServiceName: "Osiris",
	HandlerType: (*OsirisServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "RunProgram",
			Handler:       _Osiris_RunProgram_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "service.proto",
}
